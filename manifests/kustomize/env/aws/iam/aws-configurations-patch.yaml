apiVersion: v1
kind: ConfigMap
metadata:
  name: workflow-controller-configmap
  namespace: kubeflow
data:
  config: |
    {
    executorImage: $(executorImage),
    artifactRepository:
    {
        archiveLogs: true,
        s3: {
            bucket: $(artifactRepositoryBucket),
            keyPrefix: $(artifactRepositoryKeyPrefix),
            endpoint: s3.amazonaws.com,
            insecure: false
        }
    }
    }
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: ml-pipeline-ui
spec:
  template:
    spec:
      containers:
        - name: ml-pipeline-ui
          env:
            - name: ARGO_ARCHIVE_LOGS
              value: "true"
            - name: ARGO_ARCHIVE_ARTIFACTORY
              value: s3
            - name: ARGO_ARCHIVE_BUCKETNAME
              value: $(artifactRepositoryBucket)
            - name: ARGO_ARCHIVE_PREFIX
              value: $(artifactRepositoryKeyPrefix)
            - name: VIEWER_TENSORBOARD_POD_TEMPLATE_SPEC_PATH
              value: /etc/config/viewer-tensorboard-template.json
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
      volumes:
        - name: config-volume
          configMap:
            name: ml-pipeline-ui-viewer-template
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: ml-pipeline
spec:
  template:
    metadata:
      annotations:
        iam.amazonaws.com/role: $(awsIAMRole)
    spec:
      containers:
        - name: ml-pipeline-api-server
          env:
            - name: OBJECTSTORECONFIG_BUCKETNAME
              value: $(artifactRepositoryBucket)
            - name: MINIO_SERVICE_SERVICE_HOST
              value: s3.amazonaws.com
            - name: MINIO_SERVICE_SERVICE_PORT
              value: "443"
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: workflow-controller
spec:
  template:
    metadata:
      annotations:
        iam.amazonaws.com/role: $(awsIAMRole)
